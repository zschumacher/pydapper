name: test-oracle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]

    services:

      oracle:
        image: gvenzl/oracle-xe:slim
        ports:
          - 1522:1521
        env:
          ORACLE_RANDOM_PASSWORD: "yes"
          APP_USER: "pydapper"
          APP_USER_PASSWORD: "pydapper"
          ORACLE_DATABASE: "pydapper"
        options: >- # oracle has a longer startup so give the healthcheck more retries
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: checkout
        uses: actions/checkout@v1

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        env:
          POETRY_VERSION: "1.7.1"
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.create false

      - name: cache poetry.lock dependencies
        id: cache-poetry-deps
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('poetry.lock') }}-test-oracle

      - name: install dependencies
        if: steps.cache-poetry-deps.outputs.cache-hit != 'true'
        run: poetry install -E oracledb

      - name: test and coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          poetry run pytest -m "oracle"  --cov=. --cov-branch -v --durations=25
          poetry run coverage report -m
          poetry run codecov -F ${{ matrix.python-version }}-oracle
