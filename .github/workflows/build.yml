name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: 'recursive'

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.9'

      - name: Install poetry
        env:
          POETRY_VERSION: "1.1.11"
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache dependencies
        id: cache-poetry-deps
        uses: actions/cache@v1
        with:
          path: .venv
          key: v8-${{ runner.os }}-3.9-${{ hashFiles(format('{0}{1}', github.workspace, '/poetry.lock')) }}
          restore-keys: |
            v8-${{ runner.os }}-3.9-

      - name: Install dependencies
        if: steps.cache-poetry-deps.outputs.cache-hit != 'true'
        run: |
          poetry install --extras "psycopg2 pymssql"

      - name: mypy
        run: |
          poetry run mypy --config-file mypy.ini .

      - name: black and isort
        run: |
          poetry run isort --check .
          poetry run black --check .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: pydapper
          POSTGRES_PASSWORD: pydapper
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mssql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1434:1433
        env:
          SA_PASSWORD: "pydapper!PYDAPPER"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Express"

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: 'recursive'

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        env:
          POETRY_VERSION: "1.1.11"
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache dependencies
        id: cache-poetry-deps
        uses: actions/cache@v1
        with:
          path: .venv
          key: v8-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles(format('{0}{1}', github.workspace, '/poetry.lock')) }}
          restore-keys: |
            v8-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        if: steps.cache-poetry-deps.outputs.cache-hit != 'true'
        run: |
          poetry install --extras "psycopg2 pymssql"

      - name: test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          poetry run pytest --cov=. --cov-branch -v --durations=25
          poetry run coverage report -m
          poetry run coverage html
          poetry run codecov -F ${{ matrix.python-version }}
