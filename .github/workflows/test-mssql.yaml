name: test-mssql

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]

    services:

      mssql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1434:1433
        env:
          SA_PASSWORD: "pydapper!PYDAPPER"
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Express"

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install poetry
        env:
          POETRY_VERSION: "2.0.1"
        run: |
          curl -sSL https://install.python-poetry.org | python -
          poetry config virtualenvs.create false

      - name: cache poetry.lock dependencies
        id: cache-poetry-deps
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('poetry.lock') }}-test-mssql

      - name: install dependencies
        if: steps.cache-poetry-deps.outputs.cache-hit != 'true'
        run: poetry install -E pymssql

      - name: test
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          poetry run pytest -m "mssql"  --cov=. --cov-branch -v --durations=25 --cov-report=xml

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          flags: ${{ matrix.python-version}}-mssql
          token: ${{ secrets.CODECOV_TOKEN }}
